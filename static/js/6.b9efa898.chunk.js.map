{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utilities/validators/validators.js","components/Login/Login.module.css","components/Login/LoginForm.tsx","components/Login/Login.tsx"],"names":["module","exports","Textarea","input","meta","props","hasError","touched","error","className","styles","formControl","Input","required","value","maxLengthCreator","maxLength","length","reduxForm","form","handleSubmit","captchaUrl","isFetching","Preloader","preloader","onSubmit","Field","component","validate","placeholder","name","type","src","s","connect","state","auth","isAuth","login","logout","to","wrapper","style","marginBottom","formData","email","password","rememberMe","captcha"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,oJCO9DC,EAAwC,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAExEC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OAAO,yBAAKC,UAAWC,IAAOC,YAAc,KAAOL,EAAWI,IAAOF,MAAQ,MACjE,8CAAcL,EAAWE,IACxBC,GAAY,8BAAOF,EAAKI,SAS5BI,EAAkC,SAAC,GAA6B,IAA5BT,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAElEC,EAAWF,EAAKG,SAAWH,EAAKI,MACtC,OAAO,yBAAKC,UAAWC,IAAOC,YAAc,KAAOL,EAAWI,IAAOF,MAAQ,MACzE,2CAAWL,EAAWE,IACrBC,GAAY,8BAAOF,EAAKI,U,iCC3BjC,oEAAO,IAAMK,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAGA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCLjChB,EAAOC,QAAU,CAAC,QAAU,uBAAuB,UAAY,2B,oKCoChDiB,cAAU,CAACC,KAAM,SAAjBD,EAtBwB,SAAC,GAAmD,IAAlDE,EAAiD,EAAjDA,aAAcZ,EAAmC,EAAnCA,MAAOa,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,WACtE,OAAO,oCACFA,GAAc,kBAACC,EAAA,EAAD,CAAWb,OAAQA,IAAOc,YACzC,0BAAMC,SAAUL,GACZ,kBAACM,EAAA,EAAD,CAAOC,UAAWf,IAAOgB,SAAU,CAACf,KAC7BgB,YAAa,QAASC,KAAM,UACnC,kBAACJ,EAAA,EAAD,CAAOC,UAAWf,IAAOgB,SAAU,CAACf,KAAWkB,KAAM,WAC9CF,YAAa,WAAYC,KAAM,aAEtC,kBAACJ,EAAA,EAAD,CAAOC,UAAW,QAASI,KAAM,WAAYD,KAAM,eANvD,eAOKT,GAAc,6BACX,yBAAKW,IAAKX,IACV,6BAAK,kBAACK,EAAA,EAAD,CAAOC,UAAU,QAAQI,KAAK,OAAOD,KAAK,UAAUF,SAAU,CAACf,SAEvEL,GAAS,yBAAKC,UAAWwB,IAAEzB,OAAQA,GACpC,6BACI,+CCuBD0B,uBALS,SAACC,GAAD,MAA6C,CACjEd,WAAYc,EAAMC,KAAKf,WACvBgB,OAAQF,EAAMC,KAAKC,OACnBf,WAAYa,EAAMC,KAAKd,cAEkF,CACzGgB,UACAC,YAFWL,EA1BoB,SAAC7B,GAKhC,OAAIA,EAAMgC,OACC,kBAAC,IAAD,CAAUG,GAAI,aAKlB,yBAAK/B,UAAWC,IAAO+B,SAC1B,qCACA,yBAAKC,MAAO,CAACC,aAAc,SAA3B,gJAA8D,6BAA9D,4BAC6B,6BAD7B,kBAIA,kBAAC,EAAD,CAAWrB,WAAYjB,EAAMiB,WAAYD,WAAYhB,EAAMgB,WAAYI,SAhB1D,SAACmB,GACdvC,EAAMiC,MAAMM,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI","file":"static/js/6.b9efa898.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1unnd\",\"error\":\"FormsControls_error__amWdj\"};","import React from \"react\";\r\nimport styles from './FormsControls.module.css'\r\n\r\ntype TextareaPropsType = {\r\n    input: any\r\n    meta: any\r\n}\r\n\r\nexport const Textarea: React.FC<TextareaPropsType> = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    return <div className={styles.formControl + ' ' + (hasError ? styles.error : ' ')}>\r\n                <textarea {...input} {...props}/>\r\n                {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n};\r\n\r\ntype InputPropsType = {\r\n    input: any\r\n    meta: any\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    return <div className={styles.formControl + ' ' + (hasError ? styles.error : ' ')}>\r\n        <input {...input} {...props}/>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n};","export const required = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Login_wrapper__2ghFZ\",\"preloader\":\"Login_preloader__15R1M\"};","import Preloader from \"../common/Preloader/Preloader\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utilities/validators/validators\";\r\nimport styles from './Login.module.css'\r\nimport s from '../common/FormsControls/FormsControls.module.css'\r\n\r\ntype PropsType = {\r\n    handleSubmit: any\r\n    error: string\r\n    captchaUrl: string | null\r\n    isFetching: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<PropsType> = ({handleSubmit, error, captchaUrl, isFetching}) => {\r\n    return <>\r\n        {isFetching && <Preloader styles={styles.preloader}/>}\r\n        <form onSubmit={handleSubmit}>\r\n            <Field component={Input} validate={[required]}\r\n                   placeholder={\"Email\"} name={'email'}/>\r\n            <Field component={Input} validate={[required]} type={'password'}\r\n                   placeholder={\"Password\"} name={'password'}/>\r\n\r\n            <Field component={'input'} type={'checkbox'} name={'rememberMe'}/> Remember Me\r\n            {captchaUrl && <div>\r\n                <img src={captchaUrl}/>\r\n                <div><Field component='input' type='text' name='captcha' validate={[required]}/></div>\r\n            </div>}\r\n            {error && <div className={s.error}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    </>\r\n}\r\n// @ts-ignore\r\nexport default reduxForm({form: 'login'})(LoginForm)\r\n","import React from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {login, logout} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport styles from './Login.module.css'\r\nimport LoginForm from './LoginForm'\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype OwnPropsType = {}\r\ntype MapStatePropsType = {\r\n    captchaUrl: null | string\r\n    isAuth: boolean\r\n    isFetching: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha?: string) => void\r\n    logout: () => void\r\n}\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\ntype PropsType = OwnPropsType & MapStatePropsType & MapDispatchPropsType\r\n\r\nconst Login: React.FC<PropsType> = (props) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n\r\n\r\n    return <div className={styles.wrapper}>\r\n        <h1>Login</h1>\r\n        <div style={{marginBottom: '15px'}}>Данные тестового аккаунта:<br/>\r\n            Email: free@samuraijs.com<br/>\r\n            Password: free</div>\r\n        {/*@ts-ignore*/}\r\n        <LoginForm isFetching={props.isFetching} captchaUrl={props.captchaUrl} onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth,\r\n    isFetching: state.auth.isFetching,\r\n})\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, {\r\n    login,\r\n    logout\r\n})(Login)\r\n"],"sourceRoot":""}