{"version":3,"sources":["components/common/FormsControls/FormsControls.module.css","components/common/FormsControls/FormsControls.tsx","utilities/validators/validators.js","assets/images/user.jpg","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Profile/ProfileInfo/ProfileInfo.module.css","assets/images/profileBackground.jpg","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileEditMode/ProfileEditMode.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","Textarea","input","meta","props","hasError","touched","error","className","styles","formControl","Input","required","value","maxLengthCreator","maxLength","length","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","unsupportedIterableToArray","TypeError","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","isPending","useEffect","descriptionItem","Preloader","preloaderStatus","onClick","onChange","e","currentTarget","onBlur","updateUserStatus","autoFocus","ButtonUpdateAvatar","isOwner","type","target","files","updatePhoto","reduxForm","form","descriptionBlock","alt","src","profile","photos","large","userPhoto","description","onSubmit","handleSubmit","Field","component","name","keys","contacts","map","key","s","exitEditMode","preloaderProfile","ProfileData","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","toEditMode","LookingForAJob","Contacts","ProfileInfo","saveProfile","pending","setPending","wrapper","profileBackground","initialValues","formData","then","MyPosts","style","item","message","likesCounts","maxLength100","AddPostForm","validate","placeholder","postElements","posts","reverse","p","Post","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","Profile","ProfileContainer","userId","this","match","params","authUserId","history","getUserProfile","getUserStatus","refreshProfile","prevProps","React","Component","compose","auth","withRouter","memo"],"mappings":"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","file":"static/js/4.f12208fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1unnd\",\"error\":\"FormsControls_error__amWdj\"};","import React from \"react\";\r\nimport styles from './FormsControls.module.css'\r\n\r\ntype TextareaPropsType = {\r\n    input: any\r\n    meta: any\r\n}\r\n\r\nexport const Textarea: React.FC<TextareaPropsType> = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    return <div className={styles.formControl + ' ' + (hasError ? styles.error : ' ')}>\r\n                <textarea {...input} {...props}/>\r\n                {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n};\r\n\r\ntype InputPropsType = {\r\n    input: any\r\n    meta: any\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error;\r\n    return <div className={styles.formControl + ' ' + (hasError ? styles.error : ' ')}>\r\n        <input {...input} {...props}/>\r\n        {hasError && <span>{meta.error}</span>}\r\n    </div>\r\n};","export const required = value => {\r\n    if (value) return undefined;\r\n    return 'Field is required';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","module.exports = __webpack_public_path__ + \"static/media/user.209d8a39.jpg\";","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileInfo_wrapper__39M0N\",\"profileBackground\":\"ProfileInfo_profileBackground__23mlq\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__VlRTk\",\"description\":\"ProfileInfo_description__lU_fF\",\"descriptionItem\":\"ProfileInfo_descriptionItem__ImUEi\",\"preloaderStatus\":\"ProfileInfo_preloaderStatus__1x4_I\",\"preloaderProfile\":\"ProfileInfo_preloaderProfile__15JvS\",\"status\":\"ProfileInfo_status__V9tcb\"};","module.exports = __webpack_public_path__ + \"static/media/profileBackground.450874ba.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__D_09Y\",\"posts\":\"MyPosts_posts__n8PCf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1NrTz\"};","import React, {ChangeEvent, useEffect, useState} from 'react'\r\nimport styles from '../ProfileInfo.module.css'\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\n\r\ntype PropsType = {\r\n    status: string | null\r\n    updateUserStatus: (status: string | null) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    let isPending = props.status !== status && !editMode;\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n    const deactivateMode = () => {\r\n        setEditMode(false);\r\n        props.updateUserStatus(status);\r\n    };\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    };\r\n\r\n\r\n    return <div className={styles.descriptionItem}>\r\n        {isPending && <Preloader styles={styles.preloaderStatus}/>}\r\n        {!editMode &&\r\n        <div className={styles.status}>\r\n            <span onClick={activateMode}>{props.status || '-----'}</span>\r\n        </div>\r\n        }\r\n        {editMode &&\r\n        <div className={styles.status}>\r\n            {/* @ts-ignore*/}\r\n            <input onChange={onStatusChange} onBlur={deactivateMode} autoFocus={true} value={status}/>\r\n        </div>}\r\n    </div>\r\n};\r\n\r\nexport default ProfileStatusWithHooks","import styles from \"../ProfileInfo.module.css\";\r\nimport React from \"react\";\r\nimport userPhoto from \"../../../../assets/images/user.jpg\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport s from '../../../common/FormsControls/FormsControls.module.css'\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    handleSubmit: () => void\r\n    error: string | null\r\n    exitEditMode: () => void\r\n    isPending: boolean\r\n    isOwner: boolean\r\n    updatePhoto: (file: any) => void\r\n}\r\n\r\nconst ProfileEditMode: React.FC<PropsType> = props => {\r\n\r\n    return <div className={styles.descriptionBlock}>\r\n        <img alt='Avatar' src={props.profile.photos.large || userPhoto}/>\r\n        <div className={styles.description}>\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div className={styles.descriptionItem}>Full name :\r\n                    <Field component='input' type='text' name='fullName'/>\r\n                </div>\r\n                <div className={styles.descriptionItem}>Looking For A job :\r\n                    <Field component='select' name='lookingForAJob'>\r\n                        <option value='true'>Yes</option>\r\n                        <option value='false'>No</option>\r\n                    </Field>\r\n                </div>\r\n                <div className={styles.descriptionItem}>Job description :\r\n                    <Field component='input' type='text' name='lookingForAJobDescription'/>\r\n                </div>\r\n                <div className={styles.descriptionItem}>About :\r\n                    <Field component='input' type='text' name='aboutMe'/>\r\n                </div>\r\n                <div className={styles.descriptionItem}>\r\n                    Contacts:\r\n                    {Object.keys(props.profile.contacts).map(key => {\r\n                        return <div key={key}>\r\n                            {key + \": \"}<Field component='input' type='text' name={`contacts.${key}`}/>\r\n                        </div>\r\n                    })}\r\n                </div>\r\n                {props.error && <div className={s.error}>{props.error}</div>}\r\n                <button>Save</button>\r\n                <button onClick={props.exitEditMode}>Back</button>\r\n            </form>\r\n            {props.isPending && !props.error && <Preloader styles={styles.preloaderProfile}/>}\r\n        </div>\r\n\r\n        <ButtonUpdateAvatar updatePhoto={props.updatePhoto} isOwner={props.isOwner}/>\r\n    </div>\r\n};\r\n\r\ntype ButtonUpdateAvatarPropsType = {\r\n    updatePhoto: (file: any) => void\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ButtonUpdateAvatar: React.FC<ButtonUpdateAvatarPropsType> = (props) => {\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.updatePhoto(e.target.files[0])\r\n        }\r\n    };\r\n    return <>\r\n        {props.isOwner && <div><input type='file' onChange={onMainPhotoSelected}/></div>}\r\n    </>\r\n};\r\n\r\n// @ts-ignore\r\nexport default reduxForm({form: 'edit_profile'})(ProfileEditMode)","import React, {useState} from 'react'\r\nimport styles from './ProfileInfo.module.css'\r\nimport profileBackground from '../../../assets/images/profileBackground.jpg'\r\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.jpg\";\r\nimport ProfileEditMode from \"./ProfileEditMode/ProfileEditMode\";\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    updatePhoto: (file: any) => void\r\n    status: string | null\r\n    updateUserStatus: (status: string | null) => void\r\n    saveProfile: (formData: any) => Promise<ProfileType>\r\n}\r\n\r\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({saveProfile, ...props}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [pending, setPending] = useState(false);\r\n\r\n    const onSubmit = (formData: any) => {\r\n        setPending(true);\r\n        saveProfile(formData).then(() => {\r\n            setPending(false);\r\n            setEditMode(false)\r\n        })\r\n    };\r\n\r\n\r\n    return <div className={styles.wrapper}>\r\n        <img alt='Background' className={styles.profileBackground} src={profileBackground}/>\r\n\r\n        {editMode\r\n        /*@ts-ignore*/\r\n            ? <ProfileEditMode {...props} isPending={pending} initialValues={props.profile} onSubmit={onSubmit}\r\n                               exitEditMode={() => {\r\n                                   setEditMode(false)\r\n                               }}/>\r\n            : <ProfileData {...props} toEditMode={() => {\r\n                setEditMode(true)\r\n            }}/>}\r\n\r\n    </div>\r\n\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    status: string | null\r\n    updateUserStatus: (status: string | null) => void\r\n    isOwner: boolean\r\n    toEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = props => {\r\n    return <div className={styles.descriptionBlock}>\r\n        <img alt='Avatar' src={props.profile.photos.large || userPhoto}/>\r\n        <div className={styles.description}>\r\n            <div className={styles.descriptionItem}>Full name: {props.profile.fullName}</div>\r\n            <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            <LookingForAJob lookingForAJob={props.profile.lookingForAJob}\r\n                            lookingForAJobDescription={props.profile.lookingForAJobDescription}/>\r\n            <div className={styles.descriptionItem}>About: {props.profile.aboutMe}</div>\r\n            <Contacts contacts={props.profile.contacts}/>\r\n            {props.isOwner && <div>\r\n                <button onClick={props.toEditMode}>Edit</button>\r\n            </div>}\r\n        </div>\r\n    </div>\r\n};\r\n\r\ntype LookingForAJobPropsType = {\r\n    lookingForAJob: boolean | null\r\n    lookingForAJobDescription: string | null\r\n\r\n}\r\n\r\nconst LookingForAJob: React.FC<LookingForAJobPropsType> = (props) => {\r\n    return <>\r\n        <div className={styles.descriptionItem}>Looking for a\r\n            job: {props.lookingForAJob ? 'yes' : 'no'}</div>\r\n\r\n        {props.lookingForAJob &&\r\n        <div className={styles.descriptionItem}>Job\r\n            description: {props.lookingForAJobDescription}</div>}\r\n    </>\r\n};\r\n\r\ntype ContactsPropsType = {\r\n    contacts: any\r\n}\r\n\r\nconst Contacts: React.FC<ContactsPropsType> = (props) => {\r\n    return <div className={styles.descriptionItem}>\r\n        Contacts:\r\n        <ul>\r\n            {Object.keys(props.contacts).map(key => {\r\n                return <li key={key}>{key + ': ' + props.contacts[key]}</li>\r\n            })}\r\n        </ul>\r\n    </div>\r\n};\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport style from './Post.module.css'\r\n\r\nconst MyPosts = (props) => {\r\n    return (\r\n        <div className={style.item}>\r\n            <img alt='avatar' src='https://thewallpaper.co/wp-content/uploads/2017/08/disney-action-macbook-warrior-futuristic-hd-abstract-wallpapers-alien-backgrounds-aliens-fighting-adventure-avatar-mobile-scifi-free-images-fantasy.jpg' />\r\n            {props.message}\r\n            <div><span>Like: {props.likesCounts}</span></div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MyPosts","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utilities/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nlet AddPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <Field component={Textarea}\r\n               validate={[required, maxLength100]}\r\n               name={'newPostText'}\r\n               placeholder={'Enter your text'}/>\r\n        <button>Add Post</button>\r\n    </form>\r\n}\r\n\r\nAddPostForm = reduxForm({form: 'profileAddNewPostForm'})(AddPostForm)\r\n\r\nconst MyPosts = props => {\r\n    let postElements = [...props.posts].reverse().map(p => <Post likesCounts={p.likesCounts} key={p.id} message={p.message}/>)\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyPosts","import {addPost} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,{addPost})(MyPosts)\r\n\r\nexport default MyPostsContainer","import React from 'react'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\"\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string | null\r\n    authUserId: number | null\r\n    updateUserStatus: (status: string | null) => void\r\n    updatePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileType) => Promise<ProfileType>\r\n    isOwner: boolean\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n\r\n    }\r\n    return (\r\n        <>\r\n            <ProfileInfo profile={props.profile} isOwner={props.isOwner} updatePhoto={props.updatePhoto}\r\n                         status={props.status} updateUserStatus={props.updateUserStatus} saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer />\r\n        </>)\r\n\r\n}\r\n\r\nexport default Profile","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, saveProfile, updatePhoto, updateUserStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype OwnPropsType = {}\r\ntype RouterPropsType = {\r\n    match: any\r\n    history: any\r\n}\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string | null\r\n    authUserId: number | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    updatePhoto: (file: any) => void\r\n    saveProfile: (profile: ProfileType) => void\r\n}\r\n\r\n\r\ntype PropsType = OwnPropsType & MapStatePropsType & MapDispatchPropsType & RouterPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authUserId;\r\n            if (!userId) this.props.history.push('/login')\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        // eslint-disable-next-line no-lone-blocks\r\n        {/*@ts-ignore*/}\r\n        return <Profile {...this.props} isOwner={!this.props.match.params.userId}/>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authUserId: state.auth.id,\r\n});\r\n\r\nexport default compose(\r\n    connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps,\r\n        {getUserProfile, getUserStatus, updateUserStatus, updatePhoto, saveProfile}),\r\n    withRouter,\r\n    React.memo,\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}